{"version":3,"sources":["src/app/plugins/hystModal_.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA","file":"scripts.js","sourcesContent":["export class HystModal {\n    constructor(props) {\n        let defaultConfig = {\n            backscroll: true,\n            linkAttributeName: 'data-hystmodal',\n            closeOnOverlay: true,\n            closeOnEsc: true,\n            closeOnButton: true,\n            waitTransitions: false,\n            catchFocus: true,\n            fixedSelectors: '*[data-hystfixed]',\n            beforeOpen: () => {},\n            afterClose: () => {},\n        }\n        this.config = Object.assign(defaultConfig, props)\n        if (this.config.linkAttributeName) {\n            this.init()\n        }\n        this._closeAfterTransition = this._closeAfterTransition.bind(this)\n    }\n\n    init() {\n        this.isOpened = false\n        this.openedWindow = false\n        this.starter = false\n        this._nextWindows = false\n        this._scrollPosition = 0\n        this._reopenTrigger = false\n        this._overlayChecker = false\n        this._isMoved = false\n        this._focusElements = [\n            'a[href]',\n            'area[href]',\n            'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])',\n            'select:not([disabled]):not([aria-hidden])',\n            'textarea:not([disabled]):not([aria-hidden])',\n            'button:not([disabled]):not([aria-hidden])',\n            'iframe',\n            'object',\n            'embed',\n            '[contenteditable]',\n            '[tabindex]:not([tabindex^=\"-\"])',\n        ]\n        this._modalBlock = false\n\n        let existingShadow = document.querySelector('.hystmodal__shadow')\n        if (existingShadow) {\n            this.shadow = existingShadow\n        } else {\n            this.shadow = document.createElement('div')\n            this.shadow.classList.add('hystmodal__shadow')\n            document.body.appendChild(this.shadow)\n        }\n        this.eventsFeeler()\n    }\n\n    eventsFeeler() {\n        document.addEventListener(\n            'click',\n            function (e) {\n                const clickedlink = e.target.closest(\n                    '[' + this.config.linkAttributeName + ']',\n                )\n                if (!this._isMoved && clickedlink) {\n                    e.preventDefault()\n                    this.starter = clickedlink\n                    let targetSelector = this.starter.getAttribute(\n                        this.config.linkAttributeName,\n                    )\n                    this._nextWindows = document.querySelector(targetSelector)\n                    this.open()\n                    return\n                }\n                if (\n                    this.config.closeOnButton &&\n                    e.target.closest('[data-hystclose]')\n                ) {\n                    this.close()\n                    return\n                }\n            }.bind(this),\n        )\n\n        if (this.config.closeOnOverlay) {\n            document.addEventListener(\n                'mousedown',\n                function (e) {\n                    if (\n                        !this._isMoved &&\n                        e.target instanceof Element &&\n                        !e.target.classList.contains('hystmodal__wrap')\n                    )\n                        return\n                    this._overlayChecker = true\n                }.bind(this),\n            )\n\n            document.addEventListener(\n                'mouseup',\n                function (e) {\n                    if (\n                        !this._isMoved &&\n                        e.target instanceof Element &&\n                        this._overlayChecker &&\n                        e.target.classList.contains('hystmodal__wrap')\n                    ) {\n                        e.preventDefault()\n                        !this._overlayChecker\n                        this.close()\n                        return\n                    }\n                    this._overlayChecker = false\n                }.bind(this),\n            )\n        }\n\n        window.addEventListener(\n            'keydown',\n            function (e) {\n                if (\n                    !this._isMoved &&\n                    this.config.closeOnEsc &&\n                    e.which == 27 &&\n                    this.isOpened\n                ) {\n                    e.preventDefault()\n                    this.close()\n                    return\n                }\n                if (\n                    !this._isMoved &&\n                    this.config.catchFocus &&\n                    e.which == 9 &&\n                    this.isOpened\n                ) {\n                    this.focusCatcher(e)\n                    return\n                }\n            }.bind(this),\n        )\n    }\n\n    open(selector) {\n        if (selector) {\n            if (typeof selector === 'string') {\n                this._nextWindows = document.querySelector(selector)\n            } else {\n                this._nextWindows = selector\n            }\n        }\n        if (!this._nextWindows) {\n            console.log('Warning: hystModal selector is not found')\n            return\n        }\n        if (this.isOpened) {\n            this._reopenTrigger = true\n            this.close()\n            return\n        }\n        this.openedWindow = this._nextWindows\n        this._modalBlock = this.openedWindow.querySelector('.hystmodal__window')\n        this.config.beforeOpen(this)\n        this._bodyScrollControl()\n        this.shadow.classList.add('hystmodal__shadow--show')\n        this.openedWindow.classList.add('hystmodal--active')\n        this.openedWindow.setAttribute('aria-hidden', 'false')\n        if (this.config.catchFocus) this.focusControl()\n        this.isOpened = true\n    }\n\n    close() {\n        if (!this.isOpened) {\n            return\n        }\n        if (this.config.waitTransitions) {\n            this.openedWindow.classList.add('hystmodal--moved')\n            this._isMoved = true\n            this.openedWindow.addEventListener(\n                'transitionend',\n                this._closeAfterTransition,\n            )\n            this.openedWindow.classList.remove('hystmodal--active')\n        } else {\n            this.openedWindow.classList.remove('hystmodal--active')\n            this._closeAfterTransition()\n        }\n    }\n\n    _closeAfterTransition() {\n        this.openedWindow.classList.remove('hystmodal--moved')\n        this.openedWindow.removeEventListener(\n            'transitionend',\n            this._closeAfterTransition,\n        )\n        this._isMoved = false\n        this.shadow.classList.remove('hystmodal__shadow--show')\n        this.openedWindow.setAttribute('aria-hidden', 'true')\n\n        if (this.config.catchFocus) this.focusControl()\n        this._bodyScrollControl()\n        this.isOpened = false\n        this.openedWindow.scrollTop = 0\n        this.config.afterClose(this)\n\n        if (this._reopenTrigger) {\n            this._reopenTrigger = false\n            this.open()\n        }\n    }\n\n    focusControl() {\n        const nodes = this.openedWindow.querySelectorAll(this._focusElements)\n        if (this.isOpened && this.starter) {\n            this.starter.focus()\n        } else {\n            if (nodes.length) nodes[0].focus()\n        }\n    }\n\n    focusCatcher(e) {\n        const nodes = this.openedWindow.querySelectorAll(this._focusElements)\n        const nodesArray = Array.prototype.slice.call(nodes)\n        if (!this.openedWindow.contains(document.activeElement)) {\n            nodesArray[0].focus()\n            e.preventDefault()\n        } else {\n            const focusedItemIndex = nodesArray.indexOf(document.activeElement)\n            console.log(focusedItemIndex)\n            if (e.shiftKey && focusedItemIndex === 0) {\n                nodesArray[nodesArray.length - 1].focus()\n                e.preventDefault()\n            }\n            if (!e.shiftKey && focusedItemIndex === nodesArray.length - 1) {\n                nodesArray[0].focus()\n                e.preventDefault()\n            }\n        }\n    }\n\n    _bodyScrollControl() {\n        if (!this.config.backscroll) return\n\n        // collect fixed selectors to array\n        let fixedSelectors = Array.prototype.slice.call(\n            document.querySelectorAll(this.config.fixedSelectors),\n        )\n\n        let html = document.documentElement\n        if (this.isOpened === true) {\n            html.classList.remove('hystmodal__opened')\n            html.style.marginRight = ''\n            fixedSelectors.map(el => {\n                el.style.marginRight = ''\n            })\n            window.scrollTo(0, this._scrollPosition)\n            html.style.top = ''\n            return\n        }\n        this._scrollPosition = window.pageYOffset\n        let marginSize = window.innerWidth - html.clientWidth\n        html.style.top = -this._scrollPosition + 'px'\n\n        if (marginSize) {\n            html.style.marginRight = marginSize + 'px'\n            fixedSelectors.map(el => {\n                el.style.marginRight =\n                    parseInt(getComputedStyle(el).marginRight) +\n                    marginSize +\n                    'px'\n            })\n        }\n        html.classList.add('hystmodal__opened')\n    }\n}\n"],"sourceRoot":"webpack:///"}